syntax = "proto3";

package com.mocker.mq;

//import "google/protobuf/timestamp.proto";

message CreateTopicRequest {
  BrokerType broker_type = 1;

  string topic_name = 2;
}

message CreateTopicResponse {
  BrokerType broker_type = 1;

  string host = 2;

  uint32 port = 3;

  string topic_name = 4;
}

message SendMessageRequest {
  BrokerInfoContainer broker_info_container = 1;

  int32 repeat = 10;
}

message SendMessageResponse {
  bool success = 1;

//  google.protobuf.Timestamp last_timestamp = 2;
}

message GetMessagesRequest {
  BrokerRequestContainer broker_request = 1;

  enum ValueParseType {
    PLAIN = 0;
    STRING = 1;
  }

  ValueParseType bytes_parse_type = 2;
}

message GetMessagesResponse {
  repeated BrokerInfoContainer messages = 1;
}

message GetTopicsRequest {
  BrokerType broker_type = 1;
}

message GetTopicsResponse {
  repeated Queue queues = 1;
}

message Queue {
  BrokerType broker_type = 1;
  string topic_name = 2;
}

message BrokerRequestContainer {
  BrokerType broker_type = 1;

  string topic = 2;
}

message BrokerInfoContainer {
  oneof container {
    KafkaContainer kafka_container = 1;
    RabbitMqContainer rabbit_mq_container = 2;
  }
}

message KafkaContainer {
  string topic = 1;

  KafkaEvent content = 2;
}

message KafkaEvent {
  string key = 1;
  oneof value {
    string string_value = 2;
  }
}

message RabbitMqContainer {
  RabbitMqMessage content = 1;
}

message RabbitMqMessage {

}

enum BrokerType {
  BROKER_TYPE_UNDEFINED = 0;
  BROKER_TYPE_KAFKA = 1;
  BROKER_TYPE_RABBITMQ = 2;
}

service MqMocker {
  rpc CreateTopic(CreateTopicRequest) returns (CreateTopicResponse);

  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);

  rpc GetMessages(GetMessagesRequest) returns (GetMessagesResponse);

  rpc GetTopics(GetTopicsRequest) returns (GetTopicsResponse);
}