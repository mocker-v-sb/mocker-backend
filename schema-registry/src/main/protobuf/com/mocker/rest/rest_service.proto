syntax = "proto3";

package com.mocker.rest;

import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "com/mocker/rest/request.proto";
import "com/mocker/rest/service.proto";
import "com/mocker/rest/model.proto";
import "com/mocker/rest/mock.proto";
import "com/mocker/rest/mock_response.proto";

service RestMocker {
  rpc getResponse(GetResponse.Request) returns (GetResponse.Response);

  rpc createService(CreateService.Request) returns (CreateService.Response);
  rpc getService(GetService.Request) returns (GetService.Response);
  rpc getAllServices(GetAllServices.Request) returns (GetAllServices.Response);
  rpc searchServices(SearchServices.Request) returns (SearchServices.Response);
  rpc updateService(UpdateService.Request) returns (UpdateService.Response);
  rpc deleteService(DeleteService.Request) returns (DeleteService.Response);

  rpc createModel(CreateModel.Request) returns (CreateModel.Response);
  rpc getModel(GetModel.Request) returns (GetModel.Response);
  rpc getAllServiceModels(GetAllServiceModels.Request) returns (GetAllServiceModels.Response);
  rpc updateModel(UpdateModel.Request) returns (UpdateModel.Response);
  rpc deleteModel(DeleteModel.Request) returns (DeleteModel.Response);
  rpc deleteAllModels(DeleteAllModels.Request) returns (DeleteAllModels.Response);

  rpc createMock(CreateMock.Request) returns (CreateMock.Response);
  rpc getMock(GetMock.Request) returns (GetMock.Response);
  rpc getAllServiceMocks(GetAllServiceMocks.Request) returns (GetAllServiceMocks.Response);
  rpc updateMock(UpdateMock.Request) returns (UpdateMock.Response);
  rpc deleteMock(DeleteMock.Request) returns (DeleteMock.Response);
  rpc deleteAllMocks(DeleteAllMocks.Request) returns (DeleteAllMocks.Response);

  rpc createMockStaticResponse(CreateMockStaticResponse.Request) returns (CreateMockStaticResponse.Response);
  rpc getMockStaticResponse(GetMockStaticResponse.Request) returns (GetMockStaticResponse.Response);
  rpc getAllMockStaticResponses(GetAllMockStaticResponses.Request) returns (GetAllMockStaticResponses.Response);
  rpc updateMockStaticResponse(UpdateMockStaticResponse.Request) returns (UpdateMockStaticResponse.Response);
  rpc deleteMockStaticResponse(DeleteMockStaticResponse.Request) returns (DeleteMockStaticResponse.Response);
  rpc deleteAllMockStatisResponses(DeleteAllMockStaticResponses.Request) returns (DeleteAllMockStaticResponses.Response);
}

message GetResponse {

  message Request {
    string service_path = 1;
    string request_path = 2;
    Method method = 3;
    google.protobuf.StringValue body = 4;
    repeated KVPair headers = 5;
    repeated KVPair query_params = 6;
  }

  message Response {
    int32 status_code = 1;
    string content = 2;
    repeated KVPair headers = 3;
  }
}

message CreateService {

  message Request {
    string name = 1;
    string path = 2;
    google.protobuf.StringValue url = 3;
    google.protobuf.StringValue description = 4;
    google.protobuf.Timestamp expiration_time = 5;
  }

  message Response {}
}

message GetService {

  message Request {
    string path = 1;
  }

  message Response {
    string name = 1;
    string path = 2;
    google.protobuf.StringValue url = 3;
    google.protobuf.StringValue description = 4;
    google.protobuf.Timestamp expiration_time = 5;
    google.protobuf.Timestamp creation_time = 6;
    google.protobuf.Timestamp update_time = 7;
  }
}

message GetAllServices {

  message Request {}

  message Response {
    repeated ServiceSnippet services = 1;
  }
}

message SearchServices {

  message Request {
    string query = 1;
  }

  message Response {
    repeated ServiceSnippet services = 1;
  }
}

message UpdateService {

  message Request {
    string servicePath = 1;
    string name = 2;
    string path = 3;
    google.protobuf.StringValue url = 4;
    google.protobuf.StringValue description = 5;
    google.protobuf.Timestamp expiration_time = 6;
  }

  message Response {}
}

message DeleteService {

  message Request {
    string servicePath = 1;
  }

  message Response {}
}

message CreateModel{

  message Request {
    string service_path = 1;
    string name = 2;
    google.protobuf.StringValue description = 3;
    ResponseTypeNamespace.ResponseType response_type = 4;
    string response = 5;
  }

  message Response {}
}

message GetModel {

  message Request {
    string service_path = 1;
    int64 model_id = 2;
  }

  message Response {
    int64 id = 1;
    string name = 2;
    google.protobuf.StringValue description = 3;
    ResponseTypeNamespace.ResponseType response_type = 4;
    string response = 5;
  }
}

message GetAllServiceModels {

  message Request {
    string service_path = 1;
  }

  message Response {
    repeated ModelSnippet models = 1;
  }
}

message UpdateModel {

  message Request {
    string servicePath = 1;
    int64 modelId = 2;
    string name = 3;
    google.protobuf.StringValue description = 4;
    ResponseTypeNamespace.ResponseType response_type = 5;
    string response = 6;
  }

  message Response {}
}

message DeleteModel {

  message Request {
    string servicePath = 1;
    int64 modelId = 2;
  }

  message Response {}
}

message DeleteAllModels {

  message Request {
    string servicePath = 1;
  }

  message Response {

  }
}

message CreateMock {

  message Request {
    string service_path = 1;
    string name = 2;
    google.protobuf.StringValue description = 3;
    string path = 4;
    Method method = 5;
    google.protobuf.Int64Value request_model_id = 6;
    google.protobuf.Int64Value response_model_id = 7;
    repeated string request_headers = 8;
    repeated string response_headers = 9;
    repeated string query_params = 10;
    repeated string path_params = 11;
  }

  message Response {}
}

message GetMock {

  message Request {
    string service_path = 1;
    int64 mockId = 2;
  }

  message Response {
    int64 id = 1;
    string name = 2;
    google.protobuf.StringValue description = 3;
    string path = 4;
    Method method = 5;
    google.protobuf.Int64Value request_model_id = 6;
    google.protobuf.Int64Value response_model_id = 7;
    repeated string request_headers = 8;
    repeated string response_headers = 9;
    repeated string query_params = 10;
    repeated string path_params = 11;
  }
}

message GetAllServiceMocks {

  message Request {
    string service_path = 1;
  }

  message Response {
    repeated MockSnippet mocks = 1;
  }
}

message UpdateMock {

  message Request {
    string servicePath = 1;
    int64 mockId = 2;
    string name = 3;
    google.protobuf.StringValue description = 4;
    Method method = 5;
    google.protobuf.Int64Value request_model_id = 6;
    google.protobuf.Int64Value response_model_id = 7;
  }

  message Response {}
}

message DeleteMock {

  message Request {
    string servicePath = 1;
    int64 mockId = 2;
  }

  message Response {}
}

message DeleteAllMocks {

  message Request {
    string servicePath = 1;
  }

  message Response {

  }
}

message CreateMockStaticResponse {

  message Request {
    string service_path = 1;
    int64 mock_id = 2;
    string name = 3;
    int32 status_code = 4;
    repeated KVPair request_headers = 5;
    repeated KVPair response_headers = 6;
    repeated KVPair query_params = 7;
    repeated KVPair path_params = 8;
    string response_content = 9;
  }

  message Response {}
}

message GetMockStaticResponse {

  message Request {
    string service_path = 1;
    int64 mockId = 2;
    int64 responseId = 3;
  }

  message Response {
    int64 id = 1;
    int64 mock_id = 2;
    string name = 3;
    int32 status_code = 4;
    repeated KVPair request_headers = 5;
    repeated KVPair response_headers = 6;
    repeated KVPair query_params = 7;
    repeated KVPair path_params = 8;
    string response_content = 9;
  }
}

message GetAllMockStaticResponses {

  message Request {
    string service_path = 1;
    int64 mockId = 2;
  }

  message Response {
    repeated MockResponseSnippet mock_responses = 1;
  }
}

message UpdateMockStaticResponse {

  message Request {
    string servicePath = 1;
    int64 mockId = 2;
    int64 responseId = 3;
    string name = 4;
    int32 status_code = 5;
    repeated KVPair request_headers = 6;
    repeated KVPair response_headers = 7;
    repeated KVPair query_params = 8;
    repeated KVPair path_params = 9;
    string response_content = 10;
  }

  message Response {}
}

message DeleteMockStaticResponse {

  message Request {
    string servicePath = 1;
    int64 mockId = 2;
    int64 responseId = 3;
  }

  message Response {}
}

message DeleteAllMockStaticResponses {

  message Request {
    string servicePath = 1;
    int64 mockId = 2;
  }

  message Response {

  }
}