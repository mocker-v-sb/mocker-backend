syntax = "proto3";

package com.mocker.rest;

import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";
import "com/mocker/rest/request.proto";

service RestMocker {
  rpc createService(CreateServiceRequest) returns (CreateServiceResponse);

  rpc createModel(CreateModelRequest) returns (CreateModelResponse);

  rpc createMock(CreateMockRequest) returns (CreateMockResponse);

  rpc createMockStaticResponse(CreateMockStaticResponseRequest) returns (CreateMockStaticResponseResponse);
}

message CreateServiceRequest {
  string name = 1;
  string path = 2;
  google.protobuf.StringValue url = 3;
  google.protobuf.StringValue description = 4;
  google.protobuf.Timestamp expiration_time = 5;
}

message CreateServiceResponse {}

message CreateModelRequest {
  string service_path = 1;
  string name = 2;
  google.protobuf.StringValue description = 3;
  string schema = 4;
}

message CreateModelResponse {}

message CreateMockRequest {
  string service_path = 1;
  string name = 2;
  google.protobuf.StringValue description = 3;
  string path = 4;
  Method method = 5;
  google.protobuf.Int64Value request_model_id = 6;
  google.protobuf.Int64Value response_model_id = 7;
  repeated string request_headers = 8;
  repeated string response_headers = 9;
  repeated string query_params = 10;
  repeated string path_params = 11;
}

message CreateMockResponse {}

message CreateMockStaticResponseRequest {
  int64 mock_id = 1;
  string name = 2;
  int32 status_code = 3;
  repeated KVPair request_headers = 4;
  repeated KVPair response_headers = 5;
  repeated KVPair query_params = 6;
  repeated KVPair path_params = 7;
  string response_content = 8;
}

message CreateMockStaticResponseResponse {}