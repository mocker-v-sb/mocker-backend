version: '3.9'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DELETE_TOPIC_ENABLE: true
  rabbitmq:
    image: rabbitmq
    ports:
      - '5672:5672'
      - '15672:15672'
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
  db:
    image: mysql:8.0.32
    restart: always
    environment:
      MYSQL_DATABASE: 'db'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'password'
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      - '3306:3306'
    expose:
      - '3306'
    volumes:
      - my-db:/var/lib/mysql

  mq-mocker:
    image: cr.yandex/crpoieovuni5thn1fa4i/mq-mocker-server
    ports:
      - '8888:8888'
    expose:
      - '8888'
    environment:
      - PUBLIC_KAFKA_ADDRESS=158.160.57.255
      - KAFKA_ADDRESS=kafka
  gateway:
    image: cr.yandex/crpoieovuni5thn1fa4i/gateway-server
    ports:
      - '9000:9000'
    expose:
      - '9000'
    environment:
      - MQ_MOCKER_ADDRESS=mq-mocker
      - REST_MOCKER_ADDRESS=84.201.158.52
      - GRAPHQL_MOCKER_ADDRESS=78.24.220.57
      - AUTH_DB_ADDRESS=158.160.57.255
  web-ui:
    image: anastasiiabaranova/mocker-v-sb
    ports:
      - '4200:4200'
    expose:
      - '4200'
  rest-mocker:
    image: cr.yandex/crpoieovuni5thn1fa4i/rest-mocker-server
    ports:
      - '8889:8889'
    expose:
      - '8889'
    environment:
      - REST_MOCKER_DB_ADDRESS=db
  auth-db:
    image: postgres:10.5
    restart: always
    environment:
      - POSTGRES_USER=postgres
    logging:
      options:
        max-size: 10m
        max-file: "3"
    ports:
      - '5438:5432'
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      # copy the sql script to create tables
      - ./auth-init.sql:/docker-entrypoint-initdb.d/create_tables.sql

volumes:
  my-db:
